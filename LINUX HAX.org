#+TITLE:  Linux Hax
#+AUTHOR: Felix Brilej
#+Options: toc:nil html-postamble:nil
#+HTML_HEAD_EXTRA: <link rel="stylesheet" type="text/css" href="styles/base.css" />


* THE GOLDEN RULES
  :Properties:
  :VISIBILITY: children
  :End:
  - Check your firewall
  - Do you use sudo and therefor have different runtime variables (or a different environment)?
    This couldn't be confirmed by my colleagues :/
  - Check if the logfile is readable if you get no feedback at all
* Oracle Linux
** Change the hostname
   Edit the following files:
   - /etc/sysconfig/network
   - /etc/hosts
** Change keyboard layout
   Change good looking entries in /etc/sysconfig/keyboard from "en" into “de”
** Add a repository
   For CentOS and Red Hat Enterprise Linux 6.x:
   #+BEGIN_SRC sh
   #Centos extras repository (contains for example nrpe checks)
   sudo wget https://dl.fedoraproject.org/pub/epel/epel-release-latest-6.noarch.rpm
   sudo rpm -Uvh epel-release-latest-6*.rpm
   #+END_SRC

   For Oracle Linux 6.x:
   #+BEGIN_SRC sh
   cd /etc/yum.repos.d/
   wget http://public-yum.oracle.com/public-yum-ol6.repo
   #+END_SRC

   If this shows: "Error: Cannot retrieve metalink for repository: epel. Please verify its path and try again"
   Maybe it is because of old certificates. An alternative would be to use repositorise with only
   http and not https. However, sticking with https, try:
   #+BEGIN_SRC sh
   yum --disablerepo=epel -y update  ca-certificates
   #+END_SRC

* Ubuntu
  Move windows: control-windows arrow
  Ubuntu repository direction: /etc/apt/sources.list

  Ubuntu enable root login
  #+BEGIN_SRC sh
  sudo passwd root
  sudo passwd -u root
  #+END_SRC

** Change hostname 								     :Ubuntu:
   - /etc/hosts (fqdn, then shorthostname, seperated via tab)
   - /etc/hostname (short hostname)
** chkconfig 									     :Ubuntu:
   #+BEGIN_SRC sh
   #equivalents to these:
   chkconfig --add <service> chkconfig --level 345 <service> on
   chkconfig --del <service>
   #are:
   update-rc.d <service> defaults update-rc.d <service> start 20 3 4 5
   update-rc.d -f <service> remove
   #+END_SRC

** /boot Partition full 							     :Ubuntu:
   fire up this multiple times: sudo apt-get autoremove
* MySQL
   What to do when you cant start mysql as root (maybe not exactly right)
   #+BEGIN_SRC sh
   service mysqld stop
   /usr/bin/mysqld start --skip-grant-tables -user=root
   mysql -u root > UPDATE mysql.user SET Password=PASSWORD('newpwd') WHERE User='root'; mysql > FLUSH PRIVILEGES;
   #+END_SRC

   What to do when your mysql wont start generally
   #+BEGIN_SRC sh
   service mysqld stop
   mv /var/lib/mysql/mysql.sock /var/lib/mysql/mysql.sock.bak
   service mysqld start
   #+END_SRC

   Overall important commands
   #+BEGIN_SRC sql
   mysqladmin -u root -p'abc' password '123456' --change root password
   show databases;
   use testdatabase; --enables you to query the selected database
   show tables;
   describe testtable; --show available columns / attributes
   select * from testtable where id=1\G --display columns nicely; for tables with many columns
   #+END_SRC

* Package management
** RPM
   Differences in software architectures:
   - x86-64: Initial description for 64-bit architecture
   - amd64 : x86-64 for amd or intel processors (basically just a new name for the same thing)
   - i386  : 32 bit architecture

   Some usefull hacks
   #+BEGIN_SRC sh
   #Check whether a folder belongs to a package
   rpm -q -whatprovides /etc/profile
   #List all installed packages
   rpm -qa | less
   #Search for a specific package
   rpm -qa | grep -i name
   #Uninstall a package
   rpm -e name
   #Update a package with a new rpm in the current directory
   rpm -U local_upgrade.rpm
   #+END_SRC

** Yum
*** Only download packages via yum
    #+BEGIN_SRC sh
    yum install yum-downloadonly
    yum install --downloadonly --downloaddir=<directory> <package>
    #+END_SRC
* Proxy settings
   Proxy for cpan
   #+BEGIN_SRC sh
   perl -MCPAN -e shell
   o conf init /proxy/
   http://172.16.8.250:3128
   o conf commit
   exit
   #+END_SRC

   Proxy for git
   #+BEGIN_SRC sh
   git config --global http.proxy http://172.16.8.250:3128; git config --global https.proxy  http://172.16.8.250:3128
   #+END_SRC

   Proxy for bash
   #+BEGIN_SRC sh
   #Just add the following to the end of you bashrc:
   export http_proxy=http://172.16.8.250:3128 && export https_proxy=http://172.16.8.250:3128 && export ftp_proxy=http://172.16.8.250:3128
   #Unset them:
   export http_proxy= && export https_proxy= && export ftp_proxy=
   #+END_SRC

* Git
** Initial Settings
   Set General information required by git
   #+BEGIN_SRC sh
   git config --global user.name "username"
   git config --global user.email mailaddress
   git config --global http.proxy http://172.16.8.250:3128
   #+END_SRC
   Show general information required by git
   #+BEGIN_SRC sh
   git config user.name
   git config user.email
   git config http.proxy
   Fix: Local SSL issuer certificate error

Alternative: install that ssl certificate, probably the more advanced solution

git config --global http.sslVerify false

   #+END_SRC

   Leave all line-ending business to the user
   #+BEGIN_SRC sh
   git config --global core.autocrlf false
   #+END_SRC

   Install ssh key
   #+BEGIN_SRC sh
   # check if ssh-agent is running
   ps -e | grep [s]sh-agent
   # start the ssh-agent if it's not running
   ssh-agent /bin/bash
   # Unlock the ssh key
   ssh-add ~/.ssh/id_rsa.pub
   #+END_SRC

** Undo last commit
   #+BEGIN_SRC sh
   git commit ....  git reset --soft HEAD~1
   # edit files as needed
   git add ...  git commit -c ORIG_HEAD
   #+END_SRC

   if your commit is total crap:
   #+BEGIN_SRC sh
   git reset --hard HEAD~1
   #+END_SRC

** Clone Subdir
   Suppose your project is in a directory called "project", and you want only those commits which touch project/dirB.
   #+BEGIN_SRC sh
   git clone project/ subproject/
   cd subproject
   git filter-branch --prune-empty --subdirectory-filter dirB HEAD
   #+END_SRC
   The subproject will now contain the git history which touches dirB.

** Fix: Local SSL issuer certificate error
   Alternative: install that ssl certificate, probably the more advanced solution
   #+BEGIN_SRC sh
   git config --global http.sslVerify false
   #+END_SRC

** Fix: GNU TLS Error on clone
   :PROPERTIES:
   :dir:      /sshx:root@10.120.113.86:
   :END:
   The error message:
   #+BEGIN_SRC sh
   # happens after installing git using the normal ubuntu repositories
   apt-get install git
   # git clone https://tfs.somesite.com
   error: gnutls_handshake() failed: A TLS packet with unexpected length was received. while accessing https://tfs.somesite.com
   #+END_SRC

   Fix on ubuntu:
   #+BEGIN_SRC sh :results raw drawer
   # public key errors might occur, therefor we nee refreshen our key-db with the following 2 commands
   apt-key update
   apt-get update
   # remove git
   apt-get remove git -y
   apt-get install build-essential fakeroot dpkg-dev -y
   mkdir ~/git-openssl
   cd ~/git-openssl
   apt-get source git
   apt-get build-dep git -y
   apt-get install libcurl4-openssl-dev -y
   dpkg-source -x git_*.dsc
   cd git*
   # edit debian/control file and replace all instances of “libcurl4-gnutls-dev” with “libcurl4-openssl-dev” (I used sudo vim debian/control) using vim: :%s/libcurl4-gnutls-dev/libcurl4-openssl-dev/gc
   # remove the line TEST=test from the file debian/rules or it will take AGES to compile (I used sudo vim debian/rules to edit the file)
   # can i remove the ASCII generation, too? i dont need these docs
   dpkg-buildpackage -rfakeroot -b
   sudo dpkg -i ../git_*_amd64.deb
   #+END_SRC


* Mailing
** Fetchmail
   _Show certificate-chain_
   openssl s_client -connect pop.gmx.net:995 -showcerts
   - the shown certificat has to copied to a .pem file from BEGIN to END
   - next the program "c_rehash" has to be executed in that directory
     #+BEGIN_SRC sh
     c_rehash .
     #+END_SRC
   - in case the parent directory is registered as "sslcertpath" the certificate error is now
     resolved
     #+BEGIN_SRC sh
     ssl sslcertck sslcertpath /home/rtracker/.fetchmail/certs
     #+END_SRC

   _Alternative for Ubuntu_
   This is knowledge I gained from a whole lot of debugging, I'm not exactly sure about this one
   - Also add the CA as certifcate
   - When testing the openssl directly add the CA as a ca-cert file
   #+BEGIN_SRC sh
   sudo cp /usr/share/ca-certificates/outlook.dc.somesite.com.crt /usr/local/share/ca-certificates/
   sudo update-ca-certificates
   openssl s_client -CAfile ~/.fetchmail/certs/somesite.hh.pem -connect 10.120.20.218:995 -showcerts
   #+END_SRC

   _Convert a .cer into a .pem file_
   #+BEGIN_SRC sh
   openssl x509 -inform der -in certificate.cer -out certificate.pem
   #+END_SRC
* SSH
** Realize password-less login via ssh-key from one to another system
   1) ssh root@alpha
      1) enter password
   2) ssh-keygen -t rsa -P '' -f ~/.ssh/id_dsa
   3) ssh-copy-id -i ~/.ssh/id_dsa.pub root@omega
   4) ssh root@omega (for testing)

   Enable / Disable remote root access
   #+BEGIN_SRC sh
   #Set a root password
   sudo passwd root
   #Reverting that back:
   sudo passwd -l root
   #+END_SRC

   Allow remote root login:
   in /etc/ssh/sshd_config: # PermitRootLogin yes
   service ssh reload

** mpssh
   Execute one and the same bash-command on multiple systems
   #+BEGIN_SRC sh
   mpssh -f ~/banks.txt -v "uptime"
   #+END_SRC

* vSphere
** Increase VM disk-space
   1) Delete snapshots (need permission of people in charge for this)
   2) Using the vsphere interface, add a harddisk-device to the system
   3) Identify the new harddisk (a reboot might be required)
      #+BEGIN_SRC sh
      fdisk -l
      # The disk that doesnt have a valid partition table is the one we just added
      #+END_SRC
   4) Format the identified disk
      #+BEGIN_SRC sh
      fdisk /dev/identified_disk
      #+END_SRC
      what follows is an interactive dialog
      - "n" for "new Partition"
      - "p" for "primary partition"
      - "1" for partition number, since so far we dont have any partition number on this disk
      - first cylinder: "enter"
      - last cylinder: "enter"
      - "t" to change the partitinos system ID, in this case "1" will be set automatically
      - Hex Code: 8e for Linux LVM
      - "w" to write the changes and exit
   5) Check on those changes by firing um fdisk again
   6) Add the newly created disk to LVM
      - pvcreate <disk>
      - vgdisplay
      - vgextend <volumegroup> <disk>
      - pvscan
   7) Increase the size of the LVM group to the now maximal possible size
      - lvdisplay
      - lvextend <volumegroup> <disk>
      - resize2fs <volumegroup>
** Eth0 configuration after vmware clone
   vim /etc/udev/rules.d/70-persistent-net.rules
   be carefull when more than one adapter is present. otherwise:
   delete the first block and change the last word in the second block to from eth1 eth0

* Basics
  Handy tool to analyze full disks: ncdu
** Mount a cd
   #+BEGIN_SRC sh
   mount -t iso9660 /dev/scd0 /media/cdrom/
   #+END_SRC

** find, grep or sed goodies
   #+BEGIN_SRC sh
   find -type f -exec sed -i -e 's/sqlplus/sqlplus64/g' {} \;
   #search for string in current directory
   grep -R 'string' dir/
   #+END_SRC

** Logrotate
   Example from AGerler:
   #+BEGIN_SRC sh
   cat /etc/logrotate.d/fetchmail
   /var/log/fetchmail.log {

   weekly
   create 0644 rtracker adm
   rotate 4
   compress

   delaycompress
   }
   #+END_SRC
   - weekly: time interval
   - create: chmod parameter, owner und group
   - rotate: Amount of "rotates" a logfile persists before it gets deleted
   - compress: whether the log file should be zipped or not
   - delaycompress: the log only gets zipped after the rotation has been completed (file-handle reasons)

** Filter a log-file for errors / warnings
   grep -iE "(warning|error|critical)" /var/log/fetchmail.log

** Find out Mac-Address for a different System
   Prerequesite: Have another system in the same subnet (we call it System A)
   #+BEGIN_SRC sh
#From system A
arp -a
#nhhrvl038.dermalog.hh (10.120.38.254) at 00:24:a8:68:c3:00 [ether] on eth0
#Ping them once from System A
ping system_b_IP
#Again from system A
arp -a
nhhrvl038.dermalog.hh (10.120.38.254) at 00:24:a8:68:c3:00 [ether] on eth0
? (system_b_IP) at 00:0c:29:46:b5:55 [ether] on eth0
   #+END_SRC

** Show all processes that run under a certain user
   #+BEGIN_SRC sh
   ps -ef | grep certain_user
   #+END_SRC

** Change the timezone
   #+BEGIN_SRC sh
   cp /usr/share/zoneinfo/Europe/Berlin /etc/localtime
   #+END_SRC
** Unpack a .tar.gz file
   #+BEGIN_SRC sh
   tar -xvzf datei.tar.gz #(-x extract, -v verbose output, -f file to be unpacked, -z erst gzip, dann tar)
   #+END_SRC

** Copy files between systems (rsync)
   rsync -avz ursprung root@192.168.0.1:/ziel/

** Monitor a process that times out
   #+BEGIN_SRC sh
   strace -f pid-file (child-threads followen) (not confirmed)
   #+END_SRC
   Short of that, you can always look in the process init script. For instance, the SSH daemon is
   started with the script in /etc/init.d/sshd. Sometimes the PID will be defined there (search
   for pid, PID, PIDFILE, PID_FILE, etc.).  For anything that sources /etc/init.d/functions, the
   PID will live in /var/run/*.pid.

** PS1 Config
   :PROPERTIES:
   :dir:      /sshx:root@10.120.113.42:
   :END:
   #+BEGIN_SRC sh
   #bin/bash commandline setting (put into ~/.bashrc):
   export PS1='\[\033[33m\]\u@\H:\w \[\033[m\]'
   #+END_SRC

** Cronjobs
   Achtung! Cronjobs starten jede Minute neu und senden entsprechende report-Mails an verschiedene
   User sollte es bei der Ausführung einen Fehler gegeben haben

   Logging anschalten:
   #+BEGIN_SRC sh
   59 23 * * * /home/john/bin/backup.sh > /home/john/logs/backup.log 2>&1
   #+END_SRC

** Change a network config safely
   Use the "at"-tool to reset the config after 5 minutes (at-jobs).
   Useful for ipconfig or firewall config-changes to ensure connectivity.

** /bin/bash
*** ls
    Nur die Dateigröße mit Dateinamen anzeigen
    #+BEGIN_SRC sh
    ls -lh | awk '{print $5 "\t" $9}'
    #+END_SRC

*** Colors
    Black       0;30     Dark Gray     1;30
    Blue        0;34     Light Blue    1;34
    Green       0;32     Light Green   1;32
    Cyan        0;36     Light Cyan    1;36
    Red         0;31     Light Red     1;31
    Purple      0;35     Light Purple  1;35
    Brown       0;33     Yellow        1;33
    Light Gray  0;37     White         1;37

*** Colorful motd (in red)
    Andere motds kommen aus ~/etc/update-motd/~
    #+BEGIN_SRC sh
    echo -en "\033[1;34m" > /etc/motd
    echo "Text of your motd file....." >> /etc/motd
    echo -en "\033[0m" >> /etc/motd
    #+END_SRC

*** Change bash prompt expression
    #+BEGIN_SRC sh
    # yellow (for non-root users)
    export PS1='\[\033[33m\]\u@\H:\w \[\033[m\]'
    # red (for root)
    export PS1='\[\033[1;31m\]\u@\H:\w \[\033[m\]'
    #+END_SRC

*** Open process in background
    There are multiple solutions for this, it might be interesting looking into this indepth
    #+BEGIN_SRC sh
    firefox & disown
    firefox &
    firefox #now press C-z
    #+END_SRC
** Debugging of Binaries
   To debug binaries that misbehave and dont give obvious logs try the following:
   - Look in the system messages log (/var/log/messages)
   - Use strace and look out for file permission errors which might cause the binary to stop
     #+BEGIN_SRC sh
     strace -pid <PID> -f
     #+END_SRC
   - Debug the binary with gdb (u are going pretty deep in here)
** Port Analysis
   Look at opened ports:
   #+BEGIN_SRC sh
   netstat -tulpen
   #+END_SRC

   Look at the processes behind them (actually active ports):
   #+BEGIN_SRC sh
   # Use a grep filter here because you will be getting way too much
   netstat -tapen | grep
   #+END_SRC

** Install cpan modules with dependencies
   #+BEGIN_SRC sh
   perl -MCPAN -e 'my $c = "CPAN::HandleConfig";
   $c->load(doit => 1, autoconfig => 1);
   $c->edit(prerequisites_policy => "follow"); $c->edit(build_requires_install_policy => "yes");
   $c->commit'
   #+END_SRC
